


------------------------------------------------------
【応用_午前_過去問】ソフトウェア開発管理技術①_メモ




各教室の講師が自分の生徒の面談先を把握し、講師に変節部屋を案内させる




〔問１〕
●共通フレーム
：ソフトウェア開発や運用におけるプロセスを体系的に整理し、共通の基準として定めたフレームワーク
・発注者と受注者の共通認識を形成するための基準
・各工程における作業内容や成果物を明確化

〔問３〕
●成長型プロセスモデル
：システムを段階的に拡張・発展させながら完成形に近づけていく開発手法のこと


〔問４〕
●システム要求事項分析プロセス
：システム開発の初期段階で、ユーザーやビジネスの要求を整理し、システムに求められる機能や性能を明確にするプロセス


〔問６〕
●ピンポンペアプログラミング
：テスト駆動開発 (TDD) に基づいたペアプログラミング手法の一つ
2人の開発者が交互に 「テストを書く役」と「実装する役」 を繰り返す
●目次スクラム
：スクラム開発のタスクを、目次のようなリストにまとめて管理する手法


〔問７〕
●CMMI(Capability Maturity Model Integration)
：ソフトウェア開発や業務プロセスの成熟度を評価・改善するためのフレームワーク
●COBIT(Control Objectives for Information and Related Technologies)
：ITガバナンスとリスク管理のフレームワーク
●ITIL(Information Technology Infrastructure Library)
：ITサービスマネジメント（ITSM）のベストプラクティス集
●ITSS
：IT人材のスキルを可視化し、適切な育成や評価を行うための基準



〔問９〕
●デュアルライセンス
：ソフトウェアを2つ以上の異なるライセンスの下で提供する方式のこと
「OSSの自由」と「商用の柔軟性」を両立させる仕組み


〔問10〕
●クロス開発
：開発環境と実行環境が異なるシステムでの開発手法
●ラウンドトリップ開発モデル
：設計と実装を双方向に行き来しながら開発を進める手法
●XDDP(eXtreme Derivative Development Process)
：組込みソフトウェア向けのアジャイル開発手法



〔問11〕
●リバースエンジニアリング
：製品やシステムを理解するために解析するプロセスで、主にその内部構造を明らかにすることが目的
現状分析
●リエンジニアリング
：既存のシステムをより良くするために再設計や改善を行うプロセスで、リバースエンジニアリングの成果を活用してシステムを再構築
●ソースコード変換波及解析
：ソースコードの変更が他の部分にどのように影響を及ぼすかを分析する手法
改善・再設計


〔問12〕
●スクラム
：アジャイル開発手法の一つで、チームが小さな単位で機能を開発・改善しながらプロジェクトを進めるフレームワーク
●スプリント
：スクラムにおける短期間の開発サイクル（通常1〜4週間）のこと
●適応型ソフトウェア開発(ASD: Adaptive Software Development)
：適応型ソフトウェア開発は、アジャイル開発の一種で、不確実性の高いプロジェクトに適応するための手法
●フィーチャ駆動開発(FDD: Feature-Driven Development)
：「機能（フィーチャ）」単位で開発を進めるアジャイル開発手法 



〔問15〕
●インサーキットエミュレーター
：組み込みシステムの開発やデバッグに使用されるハードウェアエミュレーター
●RTOS(Real-Time Operating System：リアルタイムOS)
：リアルタイム性（決められた時間内に処理を完了すること）が求められるシステム向けのOS




〔問17〕
●ドキュメンテーションジェネレーター
：プログラムのソースコードから自動的にドキュメントを生成するツール
●TeX
：高品質な組版（レイアウト）を行うための文書処理システム



〔問１〕
〔問１〕

●ふりかえり
：一般的に、個人やチームが過去の経験を振り返ることを指す
日常業務やプロジェクトの改善に活用される
●レトロスペクティブ
：アジャイル開発における「ふりかえり」の手法の一つ
スクラムなどの開発フレームワークで、スプリントごとに行い、チームのプロセス改善を目的とする



〔問20〕
●バーンダウンチャート
：プロジェクトの進捗を視覚的に把握するためのグラフ
残りの作業量が時間とともにどのように減っていくかを示す


〔問21〕
●実施許諾
：特定の技術や著作物を使用する権利を与える契約や許可のこと


〔問23〕
●プロダクトオーナー
：アジャイル開発（特にスクラム）において、プロダクトの価値を最大化する責任を持つ役割



〔問26〕
●リーンソフトウェア開発
：トヨタ生産方式（Lean Manufacturing）の考え方をソフトウェア開発に応用した手法



〔問29〕
●バックログ
：ソフトウェア開発において管理される作業のリストのこと




〔問30〕
●インクリメンタルモデル
：システムを小さな部分（インクリメント）に分けて段階的に開発・リリースする手法
●エボリューショナルモデル
：初期段階で完全な仕様を決めずに、試作と改良を繰り返しながらシステムを発展させる手法



〔問33〕
●CASE(Computer-Aided Software Engineering)
：ソフトウェア開発を支援するためのツールや技術の総称
1．上流CASEツール（要件定義・設計）
2．下流CASEツール（プログラミング・テスト）
3．統合CASEツール（全工程対応）



〔問35〕
バリューストリームマップ


〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕



〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕








〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕




------------------------------------------------------
【応用_午前_過去問】セキュリティ①_メモ



〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕


＜モデル駆動開発（MDD: Model-Driven Development）　概念ツリー＞

モデル駆動開発（MDD）
├── モデル
│   ├── 概念モデル（CIM: Computation Independent Model）
│   ├── 設計モデル（PIM: Platform Independent Model）
│   ├── 実装モデル（PSM: Platform Specific Model）
│   └── UML（Unified Modeling Language）
│
├── 変換
│   ├── モデル変換（M2M: Model-to-Model）
│   ├── モデルからコード生成（M2T: Model-to-Text）
│   └── 逆変換（T2M: Text-to-Model、リバースエンジニアリング）
│
├── ツール
│   ├── モデリングツール（例: Enterprise Architect、MagicDraw）
│   ├── モデル変換エンジン（例: ATL、QVT）
│   ├── コード生成ツール（例: Acceleo）
│   ├── フレームワーク（例: Eclipse EMF、Papyrus）
│   └── ドメイン固有言語（DSL: Domain-Specific Language）
│
├── 関連手法
│   ├── ラウンドトリップエンジニアリング（設計↔実装の双方向変換）
│   ├── メタモデリング（モデルのモデルを定義）
│   ├── ドメイン駆動設計（DDD: Domain-Driven Design）
│   └── ソフトウェアファクトリ
│
└── 標準・規格
    ├── OMG（Object Management Group）
    │   ├── MDA（Model-Driven Architecture）
    │   ├── MOF（Meta-Object Facility）
    │   ├── QVT（Query/View/Transformation）
    │   └── XMI（XML Metadata Interchange）
    └── ISO/IEC 19510（BPMN: Business Process Model and Notation）







＜仮想記憶装置概念ツリー＞

仮想記憶装置
├── アドレス空間
│   ├── 仮想アドレス
│   ├── 物理アドレス
│   ├── 論理アドレス
│   └── アドレス変換（アドレスマッピング）
│       ├── ページング
│       │   ├── ページテーブル
│       │   ├── TLB（Translation Lookaside Buffer）
│       │   ├── ページフォールト
│       │   ├── ページ置換アルゴリズム
│       │   │   ├── FIFO（First-In First-Out）
│       │   │   ├── LRU（Least Recently Used）
│       │   │   └── LFU（Least Frequently Used）
│       └── セグメンテーション
│           ├── セグメントテーブル
│           ├── セグメントフォールト
│           └── セグメントベースのメモリ管理
├── メモリ管理
│   ├── 仮想メモリと実メモリの関係
│   ├── スワッピング
│   ├── デマンドページング
│   ├── メモリのフラグメンテーション
│   │   ├── 内部フラグメンテーション
│   │   └── 外部フラグメンテーション
│   ├── メモリ圧縮
│   ├── メモリキャッシュ
│   └── メモリプール
├── ストレージとの関係
│   ├── ハードディスク（HDD）
│   ├── ソリッドステートドライブ（SSD）
│   ├── スワップ領域
│   ├── ページファイル
│   └── キャッシュメモリ
└── 関連技術
    ├── NUMA（Non-Uniform Memory Access）
    ├── メモリマッピングI/O
    ├── DMA（Direct Memory Access）
    ├── メモリ保護
    └── 仮想化技術との関係
        ├── 仮想マシンのメモリ管理
        ├── ハイパーバイザー
        ├── メモリバルーニング
        └── KSM（Kernel Same-page Merging）













