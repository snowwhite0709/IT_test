


------------------------------------------------------
【応用_午前_過去問】ソフトウェア①_メモ


＜計算問題＞
〔問２〕
〔問８〕△
〔問９〕△
〔問12〕
〔問21〕
〔問26〕△
〔問28〕※
〔問32〕△
〔問35〕
〔問46〕
〔問47〕

＜仮想記憶装置＞
〔問６〕
〔問７〕
〔問23〕
〔問36〕
〔問41〕
〔問43〕





〔問１〕
●セマフォ
：リソースの管理やプロセス同期を行う仕組み
●セマフォ変数
：リソースの利用状況を表す整数型の変数
●P操作
：リソースを取得（値を1減らす）、使えなければ待機
●V操作
：リソースを解放（値を1増やす）、待機プロセスを再開




〔問３〕
●GNU GPL(GNU General Public License)
：フリーソフトウェアのライセンスの一つ で、ソフトウェアの自由な利用・改変・再配布を許可するライセンス
＜GNU GPLの主な特徴＞
1．ソースコードの公開が必須
2．派生ソフトウェアもGPLライセンスになる（コピーレフト）
3．自由な使用・改変・再配布が可能
4．ただし、商用利用は制限がある



〔問５〕
●ループ展開
：
●演算子強度低減
：
●定数畳み込み/定数伝播
：
●サブルーチン
：
●インライン展開
：





〔問10〕
●TSS(Time Sharing System：タイムシェアリングシステム)
：コンピュータのCPU時間を複数のユーザーやプロセスで分割して共有する方式




〔問15〕
●キャラクタスペシャルファイル
：バイト単位でデータを送受信する
●ブロックスペシャルファイル
：ブロック単位でデータを送受信する



〔問16〕
●ジョブ
：コンピュータシステムで実行される一連のタスクまたは処理のこと
複数のジョブステップを含んでおり、システムが実行する目的のために必要なすべての操作を定義する
●ジョブステップ
：ジョブ内で実行される個々の作業単位または処理のこと
ジョブが完了するために必要な特定のタスクを実行




〔問17〕
●上流CASEツール
：コンピュータ支援ソフトウェアエンジニアリングツール（CASEツール）の一種
ソフトウェア開発の初期段階における要件定義や設計作業を支援し、効率的で高品質なソフトウェア開発を可能にするためのツール群


〔問18〕
●マイクロカーネルアーキテクチャ
：オペレーティングシステムのカーネル設計の一つで、従来のモノリシックカーネル（大きな一枚岩的なカーネル）とは異なり、システムの基本機能を最小限にして、他の機能はユーザー空間で実行されるアーキテクチャ
●モノリシックカーネル
：オペレーティングシステムのカーネル設計の一つで、システム全体の機能を単一の大きなプログラム（カーネル）として実装するアーキテクチャ



〔問19〕
●アサーションチェッカ
：プログラムの前提条件が満たされているかを確認するツール
●静的コード解析ツール
：コードを実行せずに品質やセキュリティの問題を発見するツール
●テストカバレージ分析
：ストがどれだけコードを網羅しているかを測定し、テストの充実度を向上させる手法



〔問22〕
●l2cバス(Level 2 Cache Bus)
：コンピュータシステムにおけるL2キャッシュ (レベル2キャッシュ) のデータをプロセッサと他のコンポーネント間で高速に転送するためのバス
※L2キャッシュ
：CPUの内部キャッシュメモリで、主にCPUとメインメモリ（RAM）との間の速度差を埋めるために使用
L1キャッシュと比べて容量が大きく、アクセス速度は少し遅いですが、依然としてメインメモリより速い





〔問30〕
●アサーションチェッカ
：事前に設定した条件（アサーション）が成り立っているかチェックし、異常時にエラーを出力
●コードオーディタ
：
●テストカバレージモニター
：プログラムのテスト実行時に、どのコードが実行されたか（カバレッジ）を測定するツール
●トレーサー
：プログラムの実行中の処理を追跡・記録するツール



〔問31〕
●JavaBeans
：再利用可能な Java のコンポーネント のこと
●Javaサーブレット
：サーバーサイドで動作する Java プログラム
HTTPリクエストを処理し、動的なWebページを生成 する
●JMS(Java Message Service)
：メッセージ指向ミドルウェア（MOM）を利用して、システム間で非同期通信を行う仕組み



〔問33〕
●GPL(GNU General Public License)
：最も厳格なコピーレフトライセンス（派生物もGPLの適用が必要）
OSSとして公開されたプログラムを改変・再配布する際もGPLライセンスを維持しなければならない
●LGPL(GNU Lesser General Public License)
：GPLの制限を一部緩和したライセンス（主にライブラリ向け）
ライブラリ部分を変更しなければ、派生物をGPLにしなくてもよい
●MPL(Mozilla Public License)
：GPLよりも緩やかなコピーレフトライセンス
変更したソースコード部分のみMPLとして公開する必要がある（元のコードを変更しなければ非公開OK）
●BSD(Berkeley Software Distribution License)
：最も自由度の高いライセンスの1つ
派生物をOSSにする義務がない（商用ソフトウェアにも組み込める）






〔問37〕
●OSS
：ソースコードが公開され、誰でも自由に利用・改変・再配布できるソフトウェアのこと
●ディストリビュータ
：OSSをパッケージ化して配布する組織や企業、個人のこと
●コミッタ
：OSSの公式リポジトリに対してコードの変更を反映（コミット）できる権限を持つ人
●コントリビュータ
：OSSプロジェクトに貢献する人全般を指す
コードの提供だけでなく、バグ報告、ドキュメント作成、テスト、翻訳なども含まれる
●OSSベンダー
：OSSをベースに商用サービスやサポートを提供する企業
●システムインテグレータ
：企業の要望に応じてシステムの設計・開発・運用を行う企業




〔問６〕〔問７〕〔問23〕〔問39〕〔問41〕
＜仮想記憶＞
・ページング方式
→ページフォールト、ページイン、ページアウト
・スラッシング




〔問40〕
●OSS
：ソースコードが公開されており、誰でも自由に利用・改変・再配布できるソフトウェアのこと
●OSI(Open Source Initiative)
：オープンソースソフトウェアの普及や啓発を目的とした非営利団体
●OSD(Open Source Definition)
：OSIが定めた、ソフトウェアがオープンソースと認められるための10個の条件のこと


〔問45〕
●FCFS(First-Come, First-Served：先着順スケジューリング)
：処理要求が発生した順に実行する方式
●SPT(Shortest Processing Time：最短処理時間優先)
：処理時間が最も短いタスクを優先して実行する方式
全体の平均待ち時間を短縮できるメリットがある
●デッドラインスケジューリング
：各タスクの締め切り（デッドライン）を考慮してスケジューリングする方式
リアルタイムシステムなど、期限厳守が必要な環境で使われる


〔問48〕
●EJB(Enterprise JavaBeans)
：Java EE（現 Jakarta EE）のサーバーサイドコンポーネントで、大規模なエンタープライズアプリケーションの開発を簡単にするための技術
大規模システム向けのサーバーサイド技術で、トランザクション管理や分散処理に強いが、現在はより軽量な技術に置き換わりつつある


〔問49〕
●Apache subversion
：中央集権型バージョン管理システム（CVCS） の代表例
●CVS(Concurrent Versions System)
：古い中央集権型バージョン管理システム（SVNの前身）。
●RCS(Revision Control System)
：最も古いバージョン管理システムの一つで、ファイル単位の管理






------------------------------------------------------
【応用_午前_過去問】ソフトウェア②_メモ

計算
〔問７〕
〔問10〕△「使用できない」日本語の意味
〔問11〕
〔問16〕※
〔問18〕
〔問23〕
〔問25〕△
〔問27〕
〔問31〕※？
〔問35〕
〔問36〕
〔問37〕考え方が異なった
〔問45〕※
〔問47〕※
〔問49〕


＜仮想記憶＞
〔問２〕
〔問３〕
〔問８〕
〔問15〕
〔問20〕
〔問22〕
〔問29〕
〔問30〕



〔問２〕
●Beladyの例外
：ページ置換アルゴリズムに関する現象で、ページフォールト（ページがメモリに存在しない場合）を処理するアルゴリズムが最適でない場合に、予想に反してページ置換回数が増加することを指す


〔問４〕
●glibc(GNU C Library)
：GNUプロジェクトによって開発された標準的なCライブラリ
C言語で書かれたアプリケーションがシステムとやり取りする際の基盤となるライブラリで、メモリ管理、ファイル操作、入出力、システムコールなどをサポート
●GNUソフトウェア
：GNUプロジェクトが開発した自由なソフトウェアを指す
●GNOME(GNU Network Object Model Environment)
：LinuxおよびUnix系オペレーティングシステム向けのデスクトップ環境で、ユーザーフレンドリーなインターフェースを提供
●KDE(K Desktop Environment)
：LinuxやUnix系オペレーティングシステム向けのもう一つの人気のあるデスクトップ環境
※GNU(GNU's Not Unix)
フリーソフトウェアの開発を推進するプロジェクトで、特にUnix互換のオペレーティングシステムを作ることを目指す


〔問５〕
●プロセスの切り替え
：オペレーティングシステムが実行中のプロセスから別のプロセスに制御を移す作業
これにより、複数のプロセスを効率的に並行処理できるようになる
●コンテキスト切り替え
：プロセスの切り替えを行う際に必要な作業で、現在実行中のプロセスの状態（レジスタの値、プログラムカウンタなど）を保存し、新しいプロセスの状態を読み込むこと
●PSW(Program Status Word)
：CPUが実行中のプロセスに関する状態情報を格納するためのレジスタ
●オーバーヘッド
：システムの操作を実行するために必要な追加的なリソースや時間の消費を指す




〔問14〕
●メモリコンパクション
：断片化を解消してメモリを効率的に利用することが目的
メモリを移動させて連続的な空き領域を作り出す作業
●ガベージコレクション
：不要になったオブジェクトを回収してメモリリークを防ぐことが目的
不要なオブジェクトを特定して自動的にメモリを解放
●動的再配置
：プログラムの実行時にメモリ上のアドレスを変更すること
主にメモリ管理の観点で使用
●動的リンキング
：実行時に外部ライブラリをリンクしてプログラムの機能を拡張すること
外部リソース（ライブラリ）との連携のために使用


〔問19〕
●TCB(Trusted Computing Base)
：システム全体のセキュリティを支える重要な部分であり、アクセス制御や暗号化、認証、監視など、セキュリティ関連の処理を担当
●コンカレント処理
：複数の処理を同時に実行することで、効率的なリソースの利用と応答速度を向上させる技術
1つのプロセッサまたは複数のプロセッサを使用して、複数のタスクを並行して実行


〔問23〕
●インデックス方式
：


〔問26〕
●KVM(Kernel-based Virtual Machine))
：Linuxカーネルに組み込まれている仮想化技術
●QEMU(Quick Emulator)
：エミュレーターおよび仮想化プラットフォームで、ソフトウェアベースで仮想化を提供し、ハードウェアエミュレーションも可能
●Xen
：クラウド環境向けに特化したハイパーバイザーで、高いスケーラビリティと安定性を提供



〔問30〕
●記憶保護
：プログラムが他のプログラムやシステムの重要な領域にアクセスしたり変更したりするのを防ぐ技術


〔問39〕
●EAI(Enterprise Application Integration)
：企業内の異なるアプリケーションを統合するための手法や技術のこと
これにより、複数のシステム間でデータや機能を効率的に共有し、業務プロセスの一貫性と自動化を実現
●Servlet
：Javaで書かれたサーバサイドプログラムで、クライアントからのリクエストを受け取り、適切なレスポンスを返す役割を果たす
●UDDI(Universal Description, Discovery, and Integration)
：Webサービスを登録、検索、そして統合するための標準仕様で、インターネット上で公開されているWebサービスの情報を管理するためのディレクトリサービス


〔問40〕
●スワップアウト
：プロセス全体がスワップ領域に移動するイメージで、プロセス単位でメモリ内容を退避
●ページアウト
：メモリの「ページ」単位で内容がディスクに移動
プロセス全体ではなく、使用されていないメモリのページをディスクに移す


〔問43〕
●EAI(Enterprise Application Integration)
：企業内の異なる業務システム（販売管理、会計、在庫管理など）を連携させ、データの一貫性を保ちながら業務を効率化するための仕組み
●EJB(Enterprise JavaBeans)
：Java EE（現在のJakarta EE）におけるサーバーサイドのコンポーネント技術で、大規模な企業向けアプリケーションの開発を容易にするための仕組み
●ERP(Enterprise Resource Planning)
：企業全体のリソース（ヒト・モノ・カネ・情報）を一元管理し、最適な運用を実現するためのシステム




------------------------------------------------------
【応用_午前_過去問】ソフトウェア③_メモ


計算
〔問６〕
〔問11〕△
〔問16〕※
〔問20〕※

仮想記憶
〔問３〕
〔問18〕





〔問12〕
●Hadoop
：大規模データの分散処理を可能にするオープンソースのフレームワーク
●WildFly
：オープンソースのJava EE（Jakarta EE）アプリケーションサーバー
●Nginx
：軽量・高速なWebサーバーで、リバースプロキシやロードバランサーとしても利用



〔問13〕
●フラグメンテーション
：メモリの断片化
●メモリリーク
：メモリの未解放



〔問14〕
●オブジェクトコード
：コンパイラやアセンブラによってソースコードから変換された機械語のコード のこと


〔問17〕
●COM(Component Object Model)
：Microsoftが開発した ソフトウェアコンポーネントを相互に連携させる技術 
●システムコール
：アプリケーション（ユーザープログラム）がOSの機能を利用するための仕組み


〔問18〕
●ロールアウト
：現在実行中のプログラムやプロセスを主記憶から追い出し、別のプログラムをロードすること



〔問21〕
●BIND(Berkeley Internet Name Domain)
：DNS（Domain Name System）サーバーの代表的な実装
●Postfix
：メールの送受信を行うためのMTA（Mail Transfer Agent）で、SMTPプロトコルを使用するメールサーバーソフトウェア



〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕



〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕








〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕




------------------------------------------------------
【応用_午前_過去問】セキュリティ①_メモ



〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕
〔問１〕




＜仮想記憶装置概念ツリー＞

仮想記憶装置
├── アドレス空間
│   ├── 仮想アドレス
│   ├── 物理アドレス
│   ├── 論理アドレス
│   └── アドレス変換（アドレスマッピング）
│       ├── ページング
│       │   ├── ページテーブル
│       │   ├── TLB（Translation Lookaside Buffer）
│       │   ├── ページフォールト
│       │   ├── ページ置換アルゴリズム
│       │   │   ├── FIFO（First-In First-Out）
│       │   │   ├── LRU（Least Recently Used）
│       │   │   └── LFU（Least Frequently Used）
│       └── セグメンテーション
│           ├── セグメントテーブル
│           ├── セグメントフォールト
│           └── セグメントベースのメモリ管理
├── メモリ管理
│   ├── 仮想メモリと実メモリの関係
│   ├── スワッピング
│   ├── デマンドページング
│   ├── メモリのフラグメンテーション
│   │   ├── 内部フラグメンテーション
│   │   └── 外部フラグメンテーション
│   ├── メモリ圧縮
│   ├── メモリキャッシュ
│   └── メモリプール
├── ストレージとの関係
│   ├── ハードディスク（HDD）
│   ├── ソリッドステートドライブ（SSD）
│   ├── スワップ領域
│   ├── ページファイル
│   └── キャッシュメモリ
└── 関連技術
    ├── NUMA（Non-Uniform Memory Access）
    ├── メモリマッピングI/O
    ├── DMA（Direct Memory Access）
    ├── メモリ保護
    └── 仮想化技術との関係
        ├── 仮想マシンのメモリ管理
        ├── ハイパーバイザー
        ├── メモリバルーニング
        └── KSM（Kernel Same-page Merging）













